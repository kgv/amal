#![feature(decl_macro)]
#![feature(try_trait_v2)]

pub use app::App;

mod app;
mod r#const;
mod special;
mod utils;

#[cfg(test)]
mod test {
    use super::*;
    use anyhow::Result;
    use polars::prelude::*;
    use ron::{extensions::Extensions, ser::PrettyConfig};
    use special::polars::{ExprExt, Mass as _};
    use std::fs::write;

    // Series::from_iter([fatty_acid!(16).mass(), fatty_acid!(14).mass(), fatty_acid!(18).mass()])
    #[test]
    fn test() -> Result<()> {
        let data_frame = df! {
            "FA" => df! {
                "Carbons" => &[
                    8u8,
                    10,
                    11,
                    12,
                    13,
                    14,
                    14,
                    15,
                    15,
                    16,
                    16,
                    17,
                    17,
                    18,
                    18,
                    18,
                    18,
                    19,
                    18,
                    18,
                    20,
                    18,
                    20,
                    21,
                    20,
                    20,
                    22,
                    20,
                    20,
                    22,
                    23,
                    22,
                    20,
                    24,
                    24,
                    22,
                ],
                "Bounds" => &[
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [9i8], "Multiplicity" => [2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [10i8], "Multiplicity" => [2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [9i8], "Multiplicity" => [2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [10i8], "Multiplicity" => [2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [-9i8], "Multiplicity" => [2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [9i8], "Multiplicity" => [2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [-9, -12i8], "Multiplicity" => [2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [9, 12i8], "Multiplicity" => [2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [6, 9, 12i8], "Multiplicity" => [2, 2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [9, 12, 15i8], "Multiplicity" => [2, 2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [11i8], "Multiplicity" => [2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [11, 14i8], "Multiplicity" => [2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [8, 11, 14i8], "Multiplicity" => [2, 2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [11, 14, 17i8], "Multiplicity" => [2, 2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [5, 8, 11, 14i8], "Multiplicity" => [2, 2, 2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [13i8], "Multiplicity" => [2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [13, 16i8], "Multiplicity" => [2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [5, 8, 11, 14, 17i8], "Multiplicity" => [2, 2, 2, 2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => Series::new_empty(PlSmallStr::EMPTY, &DataType::Int8), "Multiplicity" => Series::new_empty(PlSmallStr::EMPTY, &DataType::UInt8) }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [15i8], "Multiplicity" => [2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                    df! { "Index" => [4, 7, 10, 13, 16, 19i8], "Multiplicity" => [2, 2, 2, 2, 2, 2u8] }?.into_struct(PlSmallStr::EMPTY).into_series(),
                ],
                "Label" => &[
                    "Methyl octanoate",
                    "Methyl decanoate",
                    "Methyl undecanoate",
                    "Methyl dodecanoate",
                    "Methyl tridecanoate",
                    "Methyl myristate [Methyl tetradecanoate]",
                    "Methyl myristoleate [Methyl cis-9-tetradecenoate]",
                    "Methyl pentadecanoate",
                    "Methyl cis-10 pentadecenoate",
                    "Methyl palmitate",
                    "Methyl palmitoleate-Z9",
                    "Methyl heptadecanoate",
                    "Methyl cis-10 heptadecenoate",
                    "Methyl stearate",
                    "Methyl trans-9 eladiate [Methyl trans-9-octadecenoate]",
                    "Methyl cis-9 oleate [Methyl cis-9-octadecenoate]",
                    "Methyl linolelaidate [Methyl trans,trans-9,12-octadecadienoate]",
                    "Nonadecanoic acid methyl ester",
                    "Methyl linoleate [Methyl 9-cis,12-cis-octadecadienoate]",
                    "Methyl-gamma-linolenate, (6Z,9Z,12Z-octadecatrienoate)",
                    "Methyl arachidate",
                    "Methyl alfa linolenate, Methyl (9Z,12Z,15Z)-octadeca-9,12,15-trienoate",
                    "Methyl cis-11 eicosenoate",
                    "Methyl heneicosanoate",
                    "Methyl cis-11,14 eicosadienoate",
                    "Methyl cis-8,11,14 eicosatrienoate",
                    "Methyl behenate [Methyl docosanoate]",
                    "Methyl cis-11,14,17 eicosatrienoate",
                    "Methyl arachidonate",
                    "Methyl erucate [Methyl cis-13-docosenoate]",
                    "Methyl tricosanoate",
                    "Methyl cis-13,16 docosadienoate",
                    "Methyl cis-5,8,11,14,17 eicosapentaenoate",
                    "Methyl lignocerate [Methyl tetracosanoate]",
                    "Methyl nervonate [Methyl cis-15-tetracosenoate]",
                    "Methyl cis-4,7,10,13,16,19 docosahexaenoate",
                ],
            }?.into_struct(PlSmallStr::EMPTY),
            "Temperature" => [
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
            ],
            "DeltaTemperature" => [
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
            ],
            "Time" => [
                Series::from_iter([Some(17.980), Some(17.955), Some(17.939)]),
                Series::from_iter([Some(26.747), Some(26.710), Some(26.690)]),
                Series::from_iter([Some(31.195), Some(31.150), Some(31.142)]),
                Series::from_iter([Some(35.535), Some(35.482), Some(35.470)]),
                Series::from_iter([Some(39.703), Some(39.649), Some(39.637)]),
                Series::from_iter([Some(43.709), Some(43.648), Some(43.636)]),
                Series::from_iter([Some(46.100), Some(46.051), Some(46.047)]),
                Series::from_iter([Some(47.522), Some(47.460), Some(47.452)]),
                Series::from_iter([Some(49.851), Some(49.802), Some(49.790)]),
                Series::from_iter([Some(51.207), Some(51.125), Some(51.109)]),
                Series::from_iter([Some(52.967), Some(52.910), Some(52.893)]),
                Series::from_iter([Some(54.661), Some(54.600), Some(54.579)]),
                Series::from_iter([Some(56.405), Some(56.339), Some(56.331)]),
                Series::from_iter([Some(58.050), Some(57.955), Some(57.943)]),
                Series::from_iter([Some(58.981), Some(58.907), Some(58.895)]),
                Series::from_iter([Some(59.439), Some(59.361), Some(59.344)]),
                Series::from_iter([Some(60.807), Some(60.741), Some(60.733)]),
                Series::from_iter([None, Some(61.149), Some(61.137)]),
                Series::from_iter([Some(61.838), Some(61.768), Some(61.760)]),
                Series::from_iter([Some(63.487), Some(63.437), Some(63.425)]),
                Series::from_iter([Some(64.332), Some(64.233), Some(64.217)]),
                Series::from_iter([Some(64.645), Some(64.587), Some(64.579)]),
                Series::from_iter([Some(65.609), Some(65.539), Some(65.519)]),
                Series::from_iter([Some(67.258), Some(67.172), Some(67.155)]),
                Series::from_iter([Some(67.893), Some(67.823), Some(67.807)]),
                Series::from_iter([Some(69.422), Some(69.356), Some(69.353)]),
                Series::from_iter([Some(70.152), Some(70.045), Some(70.029)]),
                Series::from_iter([Some(70.515), Some(70.457), Some(70.445)]),
                Series::from_iter([Some(70.523), Some(70.473), Some(70.453)]),
                Series::from_iter([Some(71.360), Some(71.277), Some(71.265)]),
                Series::from_iter([Some(72.860), Some(72.765), Some(72.749)]),
                Series::from_iter([Some(73.503), Some(73.157), Some(73.413)]),
                Series::from_iter([Some(73.214), Some(73.425), Some(73.149)]),
                Series::from_iter([Some(75.572), Some(75.442), Some(75.432)]),
                Series::from_iter([Some(76.718), Some(76.632), Some(76.611)]),
                Series::from_iter([Some(79.764), Some(79.711), Some(79.699)]),
            ],
        }?;
        println!("data_frame: {data_frame}");
        println!(
            "data_frame: {}",
            data_frame
                .clone()
                .lazy()
                .with_columns([
                    col("FA").fa().ecn().alias("ECN"),
                    col("FA").fa().mass().alias("Mass"),
                    col("FA")
                        .fa()
                        .methyl_ester()
                        .mass()
                        .alias("MethylEsterMass"),
                    col("FA").fa().rcoo().mass().alias("RCOOMass"),
                    col("Time").list().mean().alias("Mean"),
                    col("Time").list().std(0).alias("StandardDeviation"),
                ])
                .collect()?
        );
        // println!("data_frame: {}", data_frame.unnest(["FA"]).unwrap());
        let contents = ron::ser::to_string_pretty(
            &data_frame,
            PrettyConfig::default().extensions(Extensions::IMPLICIT_SOME),
        )?;
        write("df.amal.ron", contents)?;
        Ok(())
    }
}
